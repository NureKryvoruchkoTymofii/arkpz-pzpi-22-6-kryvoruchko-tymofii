Правила оформлення програмного коду

Роботу виконав: Криворучко Тимофій Олексійович
Група: ПЗПІ-22-6

2024

Зміст
1 Вступ
5 Основні рекомендації
17 Висновки
18 Список використаних джерел

ВСТУП
Мета презентації:

Ознайомлення з мовою програмування F# та ключовими рекомендаціями для написання якісного, підтримуваного та чистого коду. 
Мета полягає в демонстрації практичних аспектів функціонального програмування, які сприяють розробці стабільних і 
продуктивних програм.

Я обрав мову програмування F#, яка є сучасною мовою програмування, яка є частиною екосистеми .NET. Вона підтримує функціональну парадигму та пропонує 
засоби для ефективного написання коду, який легко тестується і підтримується.

Після того як ми обрали нашу мову програмування, далі можна перейти до коротко опису: 
    1. Головна особливість F# -- це акцент на функціональному програмуванні, 
яке забезпечує чисті функції, мінімізацію сторонніх ефектів та зручність роботи з даними.
    2.У F# підтримуються декілька парадигм, що робить її універсальною мовою. Вона дозволяє використовувати об'єктно-орієнтоване програмування, включаючи роботу з класами, 
інтерфейсами та об'єктами, що корисно для проєктів, де потрібно моделювати реальні об'єкти та їхні взаємодії. Також F# підтримує імперативний стиль, який дозволяє застосовувати змінні, цикли та 
інші знайомі конструкції, що спрощує перехід для розробників із традиційних мов програмування.
    3. F# знаходить широке застосування у різних сферах завдяки своїм потужним функціональним можливостям та інтеграції з платформою .NET. Вона використовується для створення фінансових моделей, 
забезпечуючи високу точність обчислень і надійну інтеграцію з іншими інструментами .NET. У сфері аналізу даних F# популярна завдяки зручності роботи з масивами і таблицями даних, що робить її ефективною 
для складних обчислень і статистичних завдань. Крім того, F# часто застосовують для розробки скриптів і автоматизації, адже її стисла конструкція синтаксису дозволяє швидко писати компактний і зрозумілий код. 
Для веб-розробки F# також є потужним інструментом, оскільки підтримує інтеграцію з ASP.NET, що дозволяє створювати високопродуктивні веб-додатки та API.

Основні рекомендації для написання якісного коду на F#

1 Рекомендація

    Потрібно використовувати осмислені імена функцій та змінних
    Опис: Допомагає зробити код зрозумілим для інших розробників.
    Приклад:

    // Поганий приклад 
    let x c = c + 2;

    // Гарний приклад
    let incrementTwo number = number + 2;

Обґрунтування рекомендації: 
Осмислені імена функцій та змінних є важливою складовою якісного коду, адже вони забезпечують його зрозумілість і зручність для інших розробників та для вас у майбутньому. Якщо код потребує оновлення 
чи виправлення через кілька місяців або років, зрозумілі імена допоможуть швидко згадати логіку роботи програми. Натомість абстрактні або неочевидні назви ускладнюють читання та розуміння, особливо якщо проєктом займається команда.

Приклад із реального життя: 
Уявімо, що ви працюєте в команді, яка розробляє систему обліку продажів. Якщо функція має назву calc, то її призначення може бути неочевидним: це може бути обчислення податків, загальної суми замовлення чи знижки. 
Однак, якщо функцію назвати calculate_total_sales, це одразу дає чітке уявлення про її роль.

2 Рекомендація
Потрібно уникати повторного коду (DRY принцип):
Опис: Використовуйте функції, щоб уникнути дублювання логіки.
    Приклад:

    // Поганий приклад
    let calculateSquare y = y * y;
    let calculateCube y = y * y * y; 

    // Гарний приклад
    let calculateSquareGood y = y * y;
    let calculateCubeGood y = y * calculateSquareGood y;

Обґрунтування рекомендації: 
Дублювання логіки може створити хаос у коді, особливо у великих проєктах, ускладнюючи його розуміння та розвиток. У F# функції, які легко компонуються, 
дозволяють розробникам зосереджуватись на ключовій логіці програми, а не на дублюванні рутинного коду. Дотримання DRY-принципу забезпечує легке оновлення і розширення функціональності. 
Якщо логіка зосереджена в одному місці, то будь-які зміни вимагають мінімальних зусиль. Це також робить код більш передбачуваним і простим для тестування. У довгостроковій перспективі DRY-принцип допомагає 
зменшити технічний борг і підвищити якість продукту.

Приклад із реального життя: 
Уявіть, що ви створюєте фінансову систему для розрахунку податків. У кількох різних модулях одна й та ж формула розрахунку ПДВ реалізована окремо. Якщо податкове законодавство змінюється, то 
доведеться оновлювати всі ці місця. Є великий ризик, що одне або кілька з них залишаться незмінними, і це спричинить помилки. Якщо ж формулу винести у функцію, яку можна викликати звідусіль, то 
змінити її можна буде лише в одному місці, що автоматично вплине на весь код.

3 Рекомендація
Дотримання парадигм програмування (об'єктно-орієнтоване, функціональне тощо)
Опис: 
Підхід, що базується на використанні чистих функцій, мінімізації змінних і уникненні побічних ефектів. 
Функціанальне програмування дозволяє створювати логічно структурований та компактний код.

Об'єктно-орієнтоване програмування (ООП): Цей підхід орієнтується на створення об'єктів, які мають властивості 
(атрибути) та методи (поведінку). ООП дозволяє зручно моделювати реальні процеси та сприяє повторному використанню коду.

Імперативний стиль: Фокусується на тому, як програма має виконувати завдання, з використанням змінних, циклів і 
команд для управління виконанням.

Функціональний стиль
    Приклади: 

    let area length width =
        length * length // Логіка не відповідає очікуванням

    let perimeter length width =
        length + length + width + width // Heoптимальне обчислення

    let rectangle Properties length width =
        let x = area length width
        let y = perimeter length width
        printfn "Area and Perimeter combined: %f" (x + y) // Hевiдповiдне поєднання


    // Гарний приклад
    let calculateArea length width = length * width // Чиста функція
    let calculatePerimeter length width = 2.0 * (length + width) // Ефективна функція

    let printRectangleProperties length width =
        printfn "Area: %f" (calculateArea length width)
        printfn "Perimeter: %f" (calculatePerimeter length width)

    printRectangleProperties 10.0 5.0

У гарному прикладі функція для обчислення площі враховує як довжину, так і ширину (length * width), тоді як у поганому 
прикладі площа обчислюється помилково як квадрат довжини (length * length). Також обчислення периметра стало оптимальним 
(замість багаторазового додавання використовується множення).

Гарний приклад розділяє обчислення площі та периметра, забезпечуючи їх незалежність. У поганому прикладі результат обчислень 
плутається у спільному виводі площі та периметра.

    Об'єктно-орієнтований стиль:
    // Поганий приклад
    type Rectangle() =
    member this.Calculate(length: float, width: float) =   
        printfn "Area: %f" (length * length) // Лoriка помилкова
        printfn "Perimeter: %f" (length + length + width + width) // Неоптимально
        printfn "Total: %f" ((length * length) + (length + length + width + width)) // 3мiшування метрик

    //Гарний приклад
    type Rectangle(length: float, width: float) =
        member this.Area = length * width
        member this.Perimeter = 2.0 * (length + width)

        member this.PrintProperties() =
            printfn "Area: %f" this.Area
            printfn "Perimeter: %f" this.Perimeter

    // Використання класу
    let rect = Rectangle(10.0, 5.0)
    rect.PrintProperties()
У гарному прикладі площа (Area) і периметр (Perimeter) представлені як окремі властивості класу Rectangle. Це дозволяє легко 
звертатися до них і використовувати в інших обчисленнях. У поганому прикладі ці розрахунки були вбудовані у метод і не мали 
чіткого розділення. Також у гарному прикладі є метод PrintProperties, який відповідає лише за форматоване виведення результатів. 
Це забезпечує дотримання принципу єдиної відповідальності (SRP). У поганому прикладі обчислення та виведення змішані, що ускладнює
розширення або модифікацію коду. У гарному прикладі логіка обчислення площі та периметра правильна (з урахуванням довжини та 
ширини). У поганому прикладі площа помилково обчислювалася як квадрат довжини, а периметр розраховувався неефективно через 
багаторазове додавання. Гарний приклад розділяє площу та периметр, тоді як у поганому прикладі додано ще й "загальний результат" 
(Total), що є неочікуваним і непотрібним.

Обґрунтування рекомендації: 
У F# функціональний стиль заохочує створення чистих функцій із мінімальними побічними ефектами, а об'єктно-орієнтований стиль 
дозволяє структурувати код через класи та методи, що полегшує управління складними системами. Недотримання цього правила може
призвести до заплутаного коду, де обчислення та операції змішані, що ускладнює розуміння логіки програми іншими розробниками. 
Також це може стати причиною логічних помилок, адже відсутність чіткого розділення відповідальностей збільшує ризик внесення 
змін, які негативно впливають на інші частини програми. У довгостроковій перспективі це ускладнює підтримку коду, адже додавання
нових функціональних можливостей або виправлення помилок вимагає більше часу і зусиль через необхідність розбиратися у змішаних
логіках.

Приклад із реального життя: 
Уявіть, що ви створюєте фінансову систему для розрахунку податків. У кількох різних модулях одна й та ж формула розрахунку ПДВ 
реалізована окремо. Якщо податкове законодавство змінюється, то доведеться оновлювати всі ці місця. Є великий ризик, що одне або 
кілька з них залишаться незмінними, і це спричинить помилки. Якщо ж формулу винести у функцію, яку можна викликати звідусіль, то 
змінити її можна буде лише в одному місці, що автоматично вплине на весь код.

Висновки: 
Узагальнюючи всі розглянуті рекомендації, можна зробити висновок, що дотримання правил написання якісного коду в F# значно 
підвищує продуктивність розробки, забезпечує зрозумілість та підтримуваність програм. Недотримання цих рекомендацій призводить 
до появи технічного боргу, збільшення кількості помилок і ускладнень під час розширення чи підтримки коду. Натомість, їх 
виконання забезпечує модульність, гнучкість і масштабованість програмного забезпечення, що є важливим як для окремого розробника, 
так і для роботи в команді. Таким чином, ці рекомендації не лише сприяють створенню якісного коду, але й забезпечують ефективний 
розвиток проєктів у довгостроковій перспективі.

Список використаних джерел
https://learn.microsoft.com/ru-ru/dotnet/fsharp/what-is-fsharp
https://itshka.rv.ua/xochu-vsyo-znat-f/
https://comscienceatschool.blogspot.com/p/blog-page_23.html
https://w3schoolsua.github.io/hyperskill/paradigms.html#gsc.tab=0
https://fsharp.org/
https://fsharpforfunandprofit.com/